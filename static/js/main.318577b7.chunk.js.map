{"version":3,"sources":["components/Navigation/Navigation.js","components/FoodRecognition/FoodRecognition.js","components/InferText/InferText.js","components/ImageLinkForm/ImageLinkForm.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","style","display","justifyContent","onClick","className","FoodRecognition","imageUrl","alt","src","width","height","InferText","check","console","log","inferText","ImageLinkForm","onInputChange","onButtonSubmit","id","placeholder","type","onChange","href","target","app","Clarifai","App","apiKey","event","setState","input","value","infer","concepts","i","length","string_1","name","includes","state","models","initModel","GENERAL_MODEL","version","then","generalModel","predict","response","change","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.318577b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({onRouteChange}) => {\n\n    return (\n        <nav style = {{display: 'flex', justifyContent: 'flex-end'}}>\n            <p onClick ={() => onRouteChange('signin')} className='f3 link dim blank underline pa3 pointer'>Sign out</p>\n        </nav>\n    );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nconst FoodRecognition = ({imageUrl}) => {\n\n    return (\n        <div className=\"center ma\">\n            <div className = \"absolute mt2\">\n            <img alt =\" \" src ={imageUrl} width = \"500px\" height = \"auto\"></img>\n            </div>\n        </div>\n    );\n}\n\nexport default FoodRecognition;","import React from 'react';\n\nconst InferText = (check) => {\n    console.log(check);\n    if (check.inferText === \"true\") {\n        return (\n            <div className = \"center\">\n                <h2> \"This food is okay to eat!\" </h2>\n    \n            </div>\n        );\n    }\n    else if (check.inferText === \"false\"){\n        return (\n            <div className = \"center\">\n                <h2> \"This food is NOT okay to eat!\" </h2>\n    \n            </div>\n        );\n\n \n    }\n\n    else if (check.inferText === \"\"){\n        return (\n            <div className = \"center\">\n                <h2> Put an image of a Food. </h2>\n    \n            </div>\n        );\n\n \n    }\n    \n    \n\n\n}\n\nexport default InferText;\n","import React from 'react';\n\n\n\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\n\n    return (\n        <div id= \"parent\">\n        <div>\n            <p className = 'f3'>\n                {'SmartFoodie helps high blood pressure patients find what to eat and what to avoid!'}\n            </p>\n        </div>\n        <div className= 'center'>\n            <div className = 'form pa4 br3 shadow-5'>\n                <input placeholder = \"Put URL of uploaded image here\" className = 'f5 pa2 w-90 center' type = 'text'  onChange = {onInputChange}/>\n                <h4> OR </h4>\n                <input className = 'f4 pa2 w-90 center' type = 'file'  onChange = {onInputChange}/>\n                \n\n         </div>\n         \n            \n            <button className = 'w-10 grow f4 link dib white bg-light-purple but' onClick = {onButtonSubmit}>Detect</button>\n                \n            \n        </div>\n        \n        <h4> Note: The upload function does not work in this version. You need to put the url in the text box. You can upload your image to drive and get a link. \n            </h4> <h4> To get a URL for your image go to <a href=\"https://imgur.com/upload?beta\"  target=\"_blank\"> https://imgur.com/upload?beta </a> , upload your image and right click on the image and click on 'open image in new tab'. Copy and paste that page's link.</h4>\n            <h4>For testing you can use any image from google.</h4>\n        \n        </div>\n       \n\n       \n    );\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FoodRecognition from './components/FoodRecognition/FoodRecognition';\nimport InferText from './components/InferText/InferText.js';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm.js';\n\n\n\n\nimport './App.css';\n\n\n\nconst app = new Clarifai.App({\n  apiKey: '923853faa8cc48c683ebc28b4508f980'\n });\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.check = \"\";\n    this.state={\n      input:\"\",\n      imageUrl: \"\",\n      change:\"\"\n    }\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value});\n  }\n  infer = (concepts) =>{\n    console.log(\"hello\");\n    //var con_list;\n    //con_list = [];\n    for(var i=0; i< concepts.length;i++){\n      //console.log(i);\n      //con_list.put(concepts[i].name)\n      var string_1 = concepts[i].name;\n      if (string_1.includes(\"salt\")\n          || string_1.includes(\"fat\") \n          || string_1.includes(\"sweet\") \n          || string_1.includes(\"carb\") \n          || string_1.includes(\"sodium\") \n          || string_1.includes(\"crystal\") \n          || string_1.includes(\"sugar\")){\n            return false;\n          }\n\n    }\n    return true;\n  }\n  onButtonSubmit = () =>{\n   // console.log(\"submit\");\n    this.setState({imageUrl:this.state.input});\n    app.models.initModel({id: Clarifai.GENERAL_MODEL, version: \"aa7f35c01e0642fda5cf400f543e7c40\"})\n      .then(generalModel => {\n        return generalModel.predict(this.state.input);\n      })\n      .then(response => {\n        \n        var concepts = response['outputs'][0]['data']['concepts'];\n      //  console.log(concepts);\n        this.check = this.infer(concepts);\n        \n        // state changed to change check text\n        this.setState({change:true});\n        //console.log(check);\n        //if(this.check === true){\n        //  console.log(\"OK\");\n       // }\n        //else{\n        //  console.log(\"NOT OK!\");\n        //}\n\n\n\n      })\n  }\n  \n\n  render(){\n  if(this.check === true){\n    \n    return (\n      <div className=\"App\">\n       \n        <Navigation />\n        \n        \n        <ImageLinkForm onInputChange = {this.onInputChange} onButtonSubmit = {this.onButtonSubmit}/>\n\n        <InferText inferText = \"true\"/>\n        <FoodRecognition imageUrl = {this.state.imageUrl} />\n      </div>\n    );\n      }\n\n      else if(this.check === false){\n    \n        return (\n\n          <div className=\"App\">\n            \n            <Navigation />\n            \n            \n            <ImageLinkForm onInputChange = {this.onInputChange} onButtonSubmit = {this.onButtonSubmit}/>\n            <InferText inferText = \"false\"/>\n        \n            <FoodRecognition imageUrl = {this.state.imageUrl} />\n          </div>\n        );\n          }\n\n          else{\n    \n            return (\n              <div className=\"App\">\n               \n                \n                \n                <Navigation />\n                \n                \n                <ImageLinkForm onInputChange = {this.onInputChange} onButtonSubmit = {this.onButtonSubmit}/>\n        \n                <InferText inferText = \"\"/>\n                <FoodRecognition imageUrl = {this.state.imageUrl} />\n              </div>\n            );\n              }\n  \n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}